// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Sequence {
  id           String    @id @default(uuid())
  menu         String
  number       Int?
  month        Int?
  year         Int?
  created_date DateTime  @default(now())
  updated_date DateTime? @updatedAt
}

model User {
  id           String       @id @default(uuid())
  username     String       @unique
  password     String
  token        String?      @unique
  role_id      String?
  role         Role?        @relation(fields: [role_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  profile_id   String?      @unique
  profile      Profile?     @relation(fields: [profile_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  attendance   Attendance[]
  created_date DateTime     @default(now())
  updated_date DateTime?    @updatedAt
  created_by   String?
  updated_by   String?
  deleted_date DateTime?
  deleted_by   String?
}

model Profile {
  id           String    @id @default(uuid())
  code         String    @unique
  name         String
  picture      String?
  birthdate    DateTime
  religion     String?
  user         User?
  created_date DateTime  @default(now())
  updated_date DateTime? @updatedAt
  created_by   String?
  updated_by   String?
  deleted_date DateTime?
  deleted_by   String?
}

model Role {
  id           String       @id @default(uuid())
  name         String       @unique
  description  String?
  users        User[]
  permissions  Permission[]
  created_date DateTime     @default(now())
  updated_date DateTime?    @updatedAt
  created_by   String?
  updated_by   String?
  deleted_date DateTime?
  deleted_by   String?
}

model Menu {
  id           String    @id @default(uuid())
  name         String
  path         String?
  parent_id    String?
  icon         String?
  order        Int
  is_active    Boolean   @default(true)
  created_date DateTime  @default(now())
  updated_date DateTime? @updatedAt
  created_by   String?
  updated_by   String?
  deleted_date DateTime?
  deleted_by   String?

  parent   Menu?  @relation("MultiMenu", references: [id], fields: [parent_id], onUpdate: Cascade, onDelete: Cascade)
  children Menu[] @relation("MultiMenu")

  permissions Permission[]
}

model Permission {
  role_id      String
  menu_id      String
  create       Boolean   @default(false)
  read         Boolean   @default(false)
  update       Boolean   @default(false)
  delete       Boolean   @default(false)
  role         Role      @relation(fields: [role_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  menu         Menu      @relation(fields: [menu_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  created_date DateTime  @default(now())
  updated_date DateTime? @updatedAt
  created_by   String?
  updated_by   String?

  @@id([role_id, menu_id])
}

model Attendance {
  id      String    @id @default(uuid())
  user_id String
  user    User      @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  in      DateTime  @default(now())
  out     DateTime? @updatedAt
}

model Company {
  id           String    @id @default(uuid())
  name         String
  address      String?
  phone        String?
  email        String?
  logo         String?
  created_date DateTime  @default(now())
  updated_date DateTime? @updatedAt
}

model Branch {
  id           String    @id @default(uuid())
  name         String
  address      String?
  phone        String?
  coordinate   Json
  stocks       Stock[]
  created_date DateTime  @default(now())
  updated_date DateTime? @updatedAt
  created_by   String?
  updated_by   String?
  deleted_date DateTime?
  deleted_by   String?
}

model Uom {
  id           String    @id @default(uuid())
  name         String
  description  String?
  items        Item[]
  created_date DateTime  @default(now())
  updated_date DateTime? @updatedAt
  created_by   String?
  updated_by   String?
  deleted_date DateTime?
  deleted_by   String?
}

model Item {
  id           String    @id @default(uuid())
  code         String    @unique
  name         String
  description  String?
  uom_id       String
  uom          Uom       @relation(fields: [uom_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  stocks       Stock[]
  created_date DateTime  @default(now())
  updated_date DateTime? @updatedAt
  created_by   String?
  updated_by   String?
  deleted_date DateTime?
  deleted_by   String?
}

model Stock {
  id           String    @id @default(uuid())
  item_id      String
  item         Item      @relation(fields: [item_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  qty          Int
  vendible     Boolean
  branch_id    String
  branch       Branch    @relation(fields: [branch_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  price        Float     @default(0)
  stock_io     StockIO[]
  to           StockIO[] @relation("StockIOTo")
  products     Product[]
  created_date DateTime  @default(now())
  updated_date DateTime? @updatedAt
  created_by   String?
  updated_by   String?
  deleted_date DateTime?
  deleted_by   String?
}

enum StockType {
  transfer
  consumption
  production
  purchase
  defect
  adjustment
  return
}

model StockIO {
  id           String    @id @default(uuid())
  type         StockType
  stock_id     String
  stock        Stock     @relation(fields: [stock_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  to_id        String?
  to           Stock?    @relation("StockIOTo", fields: [to_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  qty          Int
  price        Float
  note         String?
  created_date DateTime  @default(now())
  updated_date DateTime? @updatedAt
  created_by   String?
  updated_by   String?
  deleted_date DateTime?
  deleted_by   String?
}

enum PaymentMethod {
  cash
  qris
  credit_card
  debit_card
  transfer
  emoney
}

model Transaction {
  id             String           @id @default(uuid())
  products       Product[]
  net_price      Float
  total_ppn      Float
  subtotal       Float
  charges        Charges_Detail[]
  total          Float
  paid           Boolean          @default(false)
  amount         Float?
  date           DateTime?
  payment_method PaymentMethod?
  note           String?
  created_date   DateTime         @default(now())
  created_by     String
  updated_date   DateTime?        @updatedAt
  updated_by     String?
  deleted_date   DateTime?
  deleted_by     String?
}

model Product {
  id                  String      @id @default(uuid())
  stock_id            String
  stock               Stock       @relation(fields: [stock_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  transaction_id      String
  transaction         Transaction @relation(fields: [transaction_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  price               Float
  qty                 Int
  discount_percent    Boolean
  discount_percentage Float
  discount_amount     Float
  net_price           Float
  ppn_percentage      Float
  ppn_amount          Float
  subtotal            Float
  created_date        DateTime    @default(now())
  updated_date        DateTime?   @updatedAt
  created_by          String?
  updated_by          String?
  deleted_date        DateTime?
  deleted_by          String?
}

model Charges_Detail {
  id             String      @id @default(uuid())
  transaction_id String
  transaction    Transaction @relation(fields: [transaction_id], references: [id])
  name           String
  percent        Boolean
  percentage     Float
  amount         Float
  created_date   DateTime    @default(now())
  updated_date   DateTime?   @updatedAt
}
