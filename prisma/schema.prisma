// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sequence {
  id           String    @id @default(uuid())
  name         String    @unique
  number       Int       @default(0)
  month        Int?
  year         Int?
  created_date DateTime  @default(now())
  updated_date DateTime? @updatedAt

  @@map("sequences")
}

model User {
  id           String    @id @default(uuid())
  username     String    @unique
  password     String
  role_id      String?
  profile_id   String?   @unique
  branch_id    String?
  created_date DateTime  @default(now())
  updated_date DateTime? @updatedAt
  created_by   String?
  updated_by   String?
  deleted_date DateTime?
  deleted_by   String?

  role       Role?        @relation(fields: [role_id], references: [id], onUpdate: NoAction, onDelete: Cascade)
  profile    Profile?     @relation(fields: [profile_id], references: [id], onUpdate: NoAction, onDelete: Cascade)
  branch     Branch?      @relation(fields: [branch_id], references: [id], onUpdate: NoAction, onDelete: Cascade)
  attendance Attendance[]

  @@map("users")
}

model Profile {
  id           String    @id @default(uuid())
  code         String    @unique
  name         String
  picture      String?
  birthdate    DateTime
  religion     String?
  created_date DateTime  @default(now())
  updated_date DateTime? @updatedAt
  created_by   String?
  updated_by   String?
  deleted_date DateTime?
  deleted_by   String?

  user User?

  @@map("profiles")
}

model Role {
  id           String    @id @default(uuid())
  name         String    @unique
  description  String?
  created_date DateTime  @default(now())
  updated_date DateTime? @updatedAt
  created_by   String?
  updated_by   String?
  deleted_date DateTime?
  deleted_by   String?

  users       User[]
  permissions Permission[]

  @@map("roles")
}

model Menu {
  id           String    @id @default(uuid())
  name         String
  path         String?
  parent_id    String?
  icon         String?
  order        Int
  is_active    Boolean   @default(true)
  features     String[]  @default([])
  created_date DateTime  @default(now())
  updated_date DateTime? @updatedAt
  created_by   String?
  updated_by   String?
  deleted_date DateTime?
  deleted_by   String?

  parent   Menu?  @relation("MultiMenu", references: [id], fields: [parent_id], onUpdate: NoAction, onDelete: Cascade)
  children Menu[] @relation("MultiMenu")

  permissions Permission[]

  @@map("menus")
}

model Permission {
  role_id      String
  menu_id      String
  actions      String[]  @default([])
  // create       Boolean   @default(false)
  // read         Boolean   @default(false)
  // update       Boolean   @default(false)
  // delete       Boolean   @default(false)
  created_date DateTime  @default(now())
  updated_date DateTime? @updatedAt
  created_by   String?
  updated_by   String?

  role Role @relation(fields: [role_id], references: [id], onUpdate: NoAction, onDelete: Cascade)
  menu Menu @relation(fields: [menu_id], references: [id], onUpdate: NoAction, onDelete: Cascade)

  @@id([role_id, menu_id])
  @@map("permissions")
}

model Attendance {
  id      String    @id @default(uuid())
  user_id String
  in      DateTime  @default(now())
  out     DateTime? @updatedAt

  user User @relation(fields: [user_id], references: [id], onUpdate: NoAction, onDelete: Cascade)

  @@map("attendances")
}

enum Separator {
  HYPHEN @map("-")
  SLASH  @map("/")
}

model Company {
  id                 String     @id @default(uuid())
  name               String
  address            String?
  phone              String?
  email              String?
  logo               String?
  item_auto          Boolean    @default(false)
  item_format        String?
  item_separator     Separator?
  user_auto          Boolean    @default(false)
  user_format        String?
  user_separator     Separator?
  category_auto      Boolean
  category_format    String?
  category_separator Separator?
  created_date       DateTime   @default(now())
  updated_date       DateTime?  @updatedAt
  created_by         String?
  updated_by         String?

  @@map("companies")
}

model Branch {
  id           String    @id @default(uuid())
  name         String
  address      String?
  phone        String?
  coordinate   Int[]     @default([])
  created_date DateTime  @default(now())
  updated_date DateTime? @updatedAt
  created_by   String?
  updated_by   String?
  deleted_date DateTime?
  deleted_by   String?

  stocks Stock[]
  users  User[]

  @@map("branches")
}

model Uom {
  id           String    @id @default(uuid())
  name         String
  description  String?
  created_date DateTime  @default(now())
  updated_date DateTime? @updatedAt
  created_by   String?
  updated_by   String?
  deleted_date DateTime?
  deleted_by   String?

  items Item[]

  @@map("uoms")
}

model Category {
  id           String    @id @default(uuid())
  code         String    @unique
  name         String
  description  String?
  created_date DateTime  @default(now())
  updated_date DateTime  @updatedAt
  created_by   String?
  updated_by   String?
  deleted_date DateTime?
  deleted_by   String?

  items Item[]

  @@map("categories")
}

model Item {
  id           String    @id @default(uuid())
  code         String    @unique
  name         String
  description  String?
  uom_id       String
  category_id  String
  vendible     Boolean   @default(false)
  created_date DateTime  @default(now())
  updated_date DateTime? @updatedAt
  created_by   String?
  updated_by   String?
  deleted_date DateTime?
  deleted_by   String?

  uom      Uom      @relation(fields: [uom_id], references: [id], onUpdate: NoAction, onDelete: Cascade)
  category Category @relation(fields: [category_id], references: [id], onUpdate: NoAction, onDelete: Cascade)
  stocks   Stock[]

  @@map("items")
}

model Stock {
  id           String    @id @default(uuid())
  item_id      String
  qty          Int
  vendible     Boolean
  branch_id    String
  price        Float     @default(0)
  created_date DateTime  @default(now())
  updated_date DateTime? @updatedAt
  created_by   String?
  updated_by   String?
  deleted_date DateTime?
  deleted_by   String?

  item     Item      @relation(fields: [item_id], references: [id], onUpdate: NoAction, onDelete: Cascade)
  branch   Branch    @relation(fields: [branch_id], references: [id], onUpdate: NoAction, onDelete: Cascade)
  stock_io StockIO[]
  to       StockIO[] @relation("StockIOTo")
  products Product[]

  @@map("stocks")
}

enum IOType {
  transfer
  consumption
  production
  purchase
  defect
  adjustment
  return
}

enum StatusType {
  pending
  success
  failed
  cancel
}

model StockIO {
  id           String     @id @default(uuid())
  type         IOType
  stock_id     String
  to_id        String?
  qty          Int
  price        Float
  status       StatusType
  note         String?
  created_date DateTime   @default(now())
  updated_date DateTime?  @updatedAt
  created_by   String?
  updated_by   String?
  deleted_date DateTime?
  deleted_by   String?

  stock Stock  @relation(fields: [stock_id], references: [id], onUpdate: NoAction, onDelete: Cascade)
  to    Stock? @relation("StockIOTo", fields: [to_id], references: [id], onUpdate: NoAction, onDelete: Cascade)

  @@map("stocks_io")
}

enum PaymentMethod {
  cash
  qris
  credit_card
  debit_card
  transfer
  emoney
}

model Transaction {
  id           String    @id @default(uuid())
  net_price    Float
  total_ppn    Float
  subtotal     Float
  total        Float
  paid         Boolean   @default(false)
  amount       Float?
  date         DateTime?
  note         String?
  created_date DateTime  @default(now())
  created_by   String
  updated_date DateTime? @updatedAt
  updated_by   String?
  deleted_date DateTime?
  deleted_by   String?

  products       Product[]
  charges        Charges_Detail[]
  payment_method PaymentMethod?

  @@map("transactions")
}

model Product {
  id                  String    @id @default(uuid())
  stock_id            String
  transaction_id      String
  price               Float
  qty                 Int
  discount_percent    Boolean
  discount_percentage Float
  discount_amount     Float
  net_price           Float
  ppn_percentage      Float
  ppn_amount          Float
  subtotal            Float
  created_date        DateTime  @default(now())
  updated_date        DateTime? @updatedAt
  created_by          String?
  updated_by          String?
  deleted_date        DateTime?
  deleted_by          String?

  stock       Stock       @relation(fields: [stock_id], references: [id], onUpdate: NoAction, onDelete: Cascade)
  transaction Transaction @relation(fields: [transaction_id], references: [id], onUpdate: NoAction, onDelete: Cascade)

  @@map("products")
}

model Charges_Detail {
  id             String    @id @default(uuid())
  transaction_id String
  name           String
  percent        Boolean
  percentage     Float
  amount         Float
  created_date   DateTime  @default(now())
  updated_date   DateTime? @updatedAt

  transaction Transaction @relation(fields: [transaction_id], references: [id])

  @@map("charges_details")
}
